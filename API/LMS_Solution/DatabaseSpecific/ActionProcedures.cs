//////////////////////////////////////////////////////////////
// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
//////////////////////////////////////////////////////////////
// Code is generated on: 
// Code is generated using templates: SD.TemplateBindings.SharedTemplates
// Templates vendor: Solutions Design.
//////////////////////////////////////////////////////////////
using System;
using System.Data;
using System.Threading;
using System.Threading.Tasks;
using SD.LLBLGen.Pro.ORMSupportClasses;

namespace LMS.Application.LLBL.DatabaseSpecific
{
	/// <summary>Class which contains the static logic to execute action stored procedures in the database.</summary>
	public static partial class ActionProcedures
	{
		/// <summary>Delegate definition for stored procedure 'SpBookIssueTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookIssueTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBookReturnTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookReturnTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBookTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBookTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpBorrowTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpBorrowTskCallBack(System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpIssueBook' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpIssueBookCallBack(System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpPaymentTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpPaymentTskCallBack(System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpUserLogin' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserLoginCallBack(System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpUserPersonTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserPersonTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);
		/// <summary>Delegate definition for stored procedure 'SpUserTsk' to be used in combination of a UnitOfWork2 object.</summary>
		public delegate int SpUserTskCallBack(ref System.String json, IDataAccessCore dataAccessProvider);

		/// <summary>Calls stored procedure 'SpBookIssueTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookIssueTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookIssueTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookIssueTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookIssueTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBookIssueTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookIssueTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookIssueTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookIssueTskResult> SpBookIssueTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBookIssueTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookIssueTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookIssueTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookIssueTskResult> SpBookIssueTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBookIssueTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpBookIssueTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookReturnTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookReturnTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookReturnTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookReturnTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookReturnTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBookReturnTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookReturnTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookReturnTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookReturnTskResult> SpBookReturnTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBookReturnTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookReturnTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookReturnTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookReturnTskResult> SpBookReturnTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBookReturnTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpBookReturnTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBookTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBookTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBookTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookTskResult> SpBookTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBookTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBookTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpBookTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpBookTskResult> SpBookTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBookTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpBookTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBorrowTsk'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBorrowTsk(System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpBorrowTsk(json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpBorrowTsk'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpBorrowTsk(System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpBorrowTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBorrowTsk'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpBorrowTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpBorrowTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpBorrowTsk'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpBorrowTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpBorrowTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Calls stored procedure 'SpIssueBook'.<br/><br/></summary>
		/// <param name="bookId">Input parameter. </param>
		/// <param name="memberId">Input parameter. </param>
		/// <param name="issueDate">Input parameter. </param>
		/// <param name="userPersonId">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpIssueBook(System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpIssueBook(bookId, memberId, issueDate, userPersonId, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpIssueBook'.<br/><br/></summary>
		/// <param name="bookId">Input parameter. </param>
		/// <param name="memberId">Input parameter. </param>
		/// <param name="issueDate">Input parameter. </param>
		/// <param name="userPersonId">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpIssueBook(System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpIssueBookCall(dataAccessProvider, bookId, memberId, issueDate, userPersonId))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpIssueBook'. Async variant<br/><br/></summary>
		/// <param name="bookId">Input parameter. </param>
		/// <param name="memberId">Input parameter. </param>
		/// <param name="issueDate">Input parameter. </param>
		/// <param name="userPersonId">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpIssueBookAsync(System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpIssueBookAsync(bookId, memberId, issueDate, userPersonId, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpIssueBook'. Async variant<br/><br/></summary>
		/// <param name="bookId">Input parameter. </param>
		/// <param name="memberId">Input parameter. </param>
		/// <param name="issueDate">Input parameter. </param>
		/// <param name="userPersonId">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpIssueBookAsync(System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpIssueBookCall(dataAccessProvider, bookId, memberId, issueDate, userPersonId))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Calls stored procedure 'SpPaymentTsk'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpPaymentTsk(System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpPaymentTsk(json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpPaymentTsk'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpPaymentTsk(System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpPaymentTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpPaymentTsk'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpPaymentTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpPaymentTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpPaymentTsk'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpPaymentTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpPaymentTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Calls stored procedure 'SpUserLogin'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserLogin(System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserLogin(json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserLogin'.<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserLogin(System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserLoginCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserLogin'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpUserLoginAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserLoginAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserLogin'. Async variant<br/><br/></summary>
		/// <param name="json">Input parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static async Task<int> SpUserLoginAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserLoginCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				return _procReturnValue;
			}
		}

		/// <summary>Calls stored procedure 'SpUserPersonTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserPersonTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserPersonTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserPersonTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserPersonTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserPersonTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserPersonTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserPersonTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserPersonTskResult> SpUserPersonTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserPersonTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserPersonTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserPersonTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserPersonTskResult> SpUserPersonTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserPersonTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpUserPersonTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				return SpUserTsk(ref json, dataAccessProvider);
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'.<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <returns>Number of rows affected, if the database / routine doesn't suppress rowcounting.</returns>
		public static int SpUserTsk(ref System.String json, IDataAccessCore dataAccessProvider)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int toReturn = call.Call();
				json = call.GetParameterValue<System.String>(0);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="json">InputOutput parameter. </param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, CancellationToken cancellationToken)
		{
			using(var dataAccessProvider = new DataAccessAdapter())
			{
				var toReturn = await SpUserTskAsync(json, dataAccessProvider, cancellationToken).ConfigureAwait(false);
				return toReturn;
			}
		}

		/// <summary>Calls stored procedure 'SpUserTsk'. Async variant<br/><br/></summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="cancellationToken">The cancellationtoken to be used</param>
		/// <returns>SpUserTskResult instance with the number of rows affected, if the database / routine doesn't suppress rowcounting, as well the value of each output parameter</returns>
		public static async Task<SpUserTskResult> SpUserTskAsync(System.String json, IDataAccessCore dataAccessProvider, CancellationToken cancellationToken)
		{
			using(var call = CreateSpUserTskCall(dataAccessProvider, json))
			{
				int _procReturnValue = await call.CallAsync(cancellationToken).ConfigureAwait(false);
				var toReturn = new SpUserTskResult();
				toReturn.Json = call.GetParameterValue<System.String>(0);
				toReturn.Proc__ReturnValue = _procReturnValue;
				return toReturn;
			}
		}

		/// <summary>Creates the call object for the call 'SpBookIssueTsk' to stored procedure 'SpBookIssueTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookIssueTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpBookIssueTsk]", "SpBookIssueTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpBookReturnTsk' to stored procedure 'SpBookReturnTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookReturnTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpBookReturnTsk]", "SpBookReturnTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpBookTsk' to stored procedure 'SpBookTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBookTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpBookTsk]", "SpBookTsk")
							.AddParameter("@Json", "VarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpBorrowTsk' to stored procedure 'SpBorrowTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpBorrowTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpBorrowTsk]", "SpBorrowTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.Input, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpIssueBook' to stored procedure 'SpIssueBook'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="bookId">Input parameter</param>
		/// <param name="memberId">Input parameter</param>
		/// <param name="issueDate">Input parameter</param>
		/// <param name="userPersonId">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpIssueBookCall(IDataAccessCore dataAccessProvider, System.Int32 bookId, System.Int32 memberId, System.DateTime issueDate, System.Int32 userPersonId)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpIssueBook]", "SpIssueBook")
							.AddParameter("@BookId", "Int", 0, ParameterDirection.Input, true, 10, 0, bookId)
							.AddParameter("@MemberId", "Int", 0, ParameterDirection.Input, true, 10, 0, memberId)
							.AddParameter("@IssueDate", "DateTime", 0, ParameterDirection.Input, true, 0, 0, issueDate)
							.AddParameter("@UserPersonId", "Int", 0, ParameterDirection.Input, true, 10, 0, userPersonId);
		}

		/// <summary>Creates the call object for the call 'SpPaymentTsk' to stored procedure 'SpPaymentTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpPaymentTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpPaymentTsk]", "SpPaymentTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.Input, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpUserLogin' to stored procedure 'SpUserLogin'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">Input parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserLoginCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpUserLogin]", "SpUserLogin")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.Input, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpUserPersonTsk' to stored procedure 'SpUserPersonTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserPersonTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpUserPersonTsk]", "SpUserPersonTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}

		/// <summary>Creates the call object for the call 'SpUserTsk' to stored procedure 'SpUserTsk'.</summary>
		/// <param name="dataAccessProvider">The data access provider.</param>
		/// <param name="json">InputOutput parameter</param>
		/// <returns>Ready to use StoredProcedureCall object</returns>
		private static StoredProcedureCall CreateSpUserTskCall(IDataAccessCore dataAccessProvider, System.String json)
		{
			return new StoredProcedureCall(dataAccessProvider, @"[Roshish_LibraryManagementSystem].[dbo].[SpUserTsk]", "SpUserTsk")
							.AddParameter("@Json", "NVarChar", 2147483647, ParameterDirection.InputOutput, true, 0, 0, json);
		}


		/// <summary>Return value struct for the async method SpBookIssueTskAsync().</summary>
		public struct SpBookIssueTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpBookReturnTskAsync().</summary>
		public struct SpBookReturnTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpBookTskAsync().</summary>
		public struct SpBookTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpUserPersonTskAsync().</summary>
		public struct SpUserPersonTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

		/// <summary>Return value struct for the async method SpUserTskAsync().</summary>
		public struct SpUserTskResult
		{
			/// <summary>The value returned in the output parameter Json</summary>
			public System.String Json { get; set; }
			/// <summary>The number of rows affected, if the database / routine doesn't suppress rowcounting</summary>
			public int Proc__ReturnValue { get; set; }
		}

	}
}
